generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id @default(cuid())
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Store {
  id          Int         @id @default(autoincrement())
  shopifyId   String      @unique
  name        String
  email       String
  domain      String
  url         String
  promotions  Promotion[]
  products    Product[]
}

model Product {
  id                  Int               @id @default(autoincrement())
  title               String
  shopifyId           String            @unique
  price               Float
  basePrice           Float
  promotionalPrice    Float
  hasSellingPlan      Boolean @default(false)
  storeId             Int
  store               Store       @relation(fields: [storeId], references: [id])
  variants            ProductVariant[]
  promotions          PromotionProduct[]
}

model ProductVariant {
  id         Int      @id @default(autoincrement())
  shopifyId  String   @unique
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  price      Float
}

model Promotion {
  id                  Int                  @id @default(autoincrement())
  name                String
  startDate           DateTime
  endDate             DateTime
  storeId             Int
  store               Store               @relation(fields: [storeId], references: [id])
  promotionProducts   PromotionProduct[]
  discountCodes       PromotionDiscountCode[]
}

model PromotionProduct {
  id                  Int        @id @default(autoincrement())
  promotionId         Int
  productId           Int
  variantId           Int?
  originalPrice       Float
  promotionalPrice    Float
  hasConflict         Boolean    @default(false) // Indique si déjà en rabais ailleurs
  promotion           Promotion  @relation(fields: [promotionId], references: [id])
  product             Product    @relation(fields: [productId], references: [id])
}

model PromotionDiscountCode {
  id            Int       @id @default(autoincrement())
  promotionId   Int
  code          String
  discountValue Float
  createdAt     DateTime  @default(now())
  promotion     Promotion @relation(fields: [promotionId], references: [id])
}